import sqlite3
import locale
import re
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service as ChromeService
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
import time
from tqdm import tqdm
from parser_1 import write_data


def setup_driver():
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    options = Options()
    options.add_argument("--headless")
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--start-maximized')

    driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)
    driver.implicitly_wait(7)
    return driver


def get_links(faculty, url: str, driver) -> dict:
    link_dict = {}
    driver.get(url)

    elements = driver.find_elements(By.TAG_NAME, 'h3')

    for element in elements:
        if faculty in element.text.lower():
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ª–æ–≤–∏—è
            sibling_count = 4 if faculty in ['–∫–æ–ª–ª–µ–¥–∂', '–∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞'] else 2
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º sibling_count
            next_elements = element.find_elements(By.XPATH, f'./following-sibling::*[contains(@class, "ranepa-hidden")][position() <= {sibling_count}]')
            
            temp_link_dict = {}
            for el in next_elements:
                ranepa = el.find_element(By.CLASS_NAME, 'ranepa-hidden-content')
                link_elements = ranepa.find_elements(By.TAG_NAME, 'a')
                for link_element in link_elements:
                    link = link_element.get_attribute('href')
                    description = link_element.get_attribute('text')
                    temp_link_dict[description] = link
            
            link_dict[element.text] = temp_link_dict

    if len(link_dict) == 1:
        link_dict = list(link_dict.values())[0]
    else:
        for faculty_key, obj in link_dict.items():
            if '—Å–µ–º–µ—Å—Ç—Ä' in faculty_key:
                link_dict = obj
    print('–°—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã')

    return link_dict


def add_smiley_to_audience_and_teacher(text):
    text = re.sub(r'(\b[–û–ß–ü–ì]-\S+\b)', r'\nüè¢\1', text)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –ø–µ—Ä–µ–¥ –Ω–æ–º–µ—Ä–æ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    text = re.sub(r'([–ê-–Ø][–∞-—è]{1,20}\s[–ê-–Ø]\.[–ê-–Ø]\.)', r'üë®‚Äçüè´\1',
                  text)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    return text

def add_timetable_to_database(timetable_dict, faculty):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    conn = sqlite3.connect('timetable.db')
    cursor = conn.cursor()
    
    for description_day, subject in timetable_dict.items():
        description, day_of_week = description_day.split(' // ')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã, –≥—Ä—É–ø–ø—ã –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        cursor.execute("""SELECT ID, –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ FROM Schedule WHERE
                            –î–∞—Ç–∞=? AND –ì—Ä—É–ø–ø–∞=? AND –§–∞–∫—É–ª—å—Ç–µ—Ç=?""", 
                        (day_of_week, description, faculty))
        result = cursor.fetchone()

        if subject:
            if result:
                schedule_id, existing_subject = result
                if existing_subject != subject:
                    # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    cursor.execute("""UPDATE Schedule SET –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ=? WHERE ID=?""",
                                    (subject, schedule_id))
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                cursor.execute("""INSERT INTO Schedule (–î–∞—Ç–∞, –ì—Ä—É–ø–ø–∞, –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –§–∞–∫—É–ª—å—Ç–µ—Ç) 
                                    VALUES (?, ?, ?, ?)""", 
                                (day_of_week, description, subject, faculty))
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    conn.commit()
    conn.close()

def get_timetable(link_dict, driver, faculty):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    timetable_dict = {}
    subject_list = []
    first = True
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –¥–ª—è –ø–∞—Ä
    college_schedule = {
        1: "8.00 ‚Äì 9.30",
        2: "9.40 ‚Äì 11.10",
        3: "11.40 ‚Äì 13.10",
        4: "13.20 ‚Äì 14.50",
        5: "15.00 ‚Äì 16.30",
        6: "17.00 ‚Äì 18.30",
        7: "18.40 ‚Äì 20.10",
        8: "20.20 ‚Äì 21.50"
    }

    faculty_schedule = {
        1: "8.00 ‚Äì 9.20",
        2: "9.40 ‚Äì 11.00",
        3: "11.30 ‚Äì 12.50",
        4: "13.10 ‚Äì 14.30",
        5: "14.50 ‚Äì 16.10",
        6: "16.40 ‚Äì 18.00",
        7: "18.20 ‚Äì 19.40",
        8: "20.00 ‚Äì 21.20"
    }
    
    time_schedule = faculty_schedule if '—Ñ–∞–∫—É–ª—å—Ç–µ—Ç' in faculty.lower() else college_schedule

    for description, link in tqdm(link_dict.items(), desc="–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫", unit="link"):
        driver.get(link)
        tables = driver.find_elements(By.TAG_NAME, 'table')
        for table in tqdm(tables, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü", leave=False):
            for row in table.find_elements(By.TAG_NAME, 'tr')[1:]:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                cells = row.find_elements(By.TAG_NAME, 'td')
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —è—á–µ–µ–∫
                day_of_week = cells[0].text
                if day_of_week != '–í—Ä–µ–º—è':
                    day_of_week = day_of_week.replace(',', ', ')
                    for num in range(1, len(cells)):
                        subject = cells[num].text
                        if subject != '' and subject != '_':
                            if first:
                                subject_list.append(
                                    f'üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_of_week}\n\nüï∞{time_schedule[num]}\nüìñ{subject}')
                                first = False
                            else:
                                subject_list.append(f'üï∞{time_schedule[num]}\nüìñ{subject}')
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–æ–≤
                    subject_list = [add_smiley_to_audience_and_teacher(event) for event in subject_list]
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞, –∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    timetable_dict[description + ' // ' + day_of_week] = '\n\n'.join(subject_list)
                    subject_list = []
                    first = True
                

    if timetable_dict:
        add_timetable_to_database(timetable_dict, faculty)

if __name__ == "__main__":
    driver = setup_driver()
    url = 'https://orel.ranepa.ru/studentam-i-slushatelyam/index.php'
    links = []
    while not links:
        links = get_links("–§–∞–∫—É–ª—å—Ç–µ—Ç ¬´–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ¬ª".lower(), url, driver)
        time.sleep(5)
    get_timetable(links, driver, "–§–∞–∫—É–ª—å—Ç–µ—Ç ¬´–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ¬ª")
