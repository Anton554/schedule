import datetime
import json
import locale
import re
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service as ChromeService, Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
import time
from parser import write_data


def setup_driver():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    options = Options()
    options.add_argument("--headless")

    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--start-maximized')

    # service = Service("/Users/kasper/Documents/Projecst/IT/Python/rasspisanie/chromedriver")
    service = Service("111/chromedriver")
    # driver = webdriver.Chrome(options=options, service=ChromeService(ChromeDriverManager().install()))
    driver = webdriver.Chrome(service=service, options=options)
    return driver


def get_links(url: str) -> dict:
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π
    link_dict = {}

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
    driver = setup_driver()

    # try:
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ø–æ–º–æ—â—å—é Selenium
    driver.get(url)
    time.sleep(1)
    print('–ø—Ä–æ—à–ª–∏ driver.get(url)')

    # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º "ranepa-hidden"
    elements = driver.find_elements(By.CLASS_NAME, 'ranepa-hidden')

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤
    pattern = r'[1-4]\s+–∫—É—Ä—Å'

    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    for element in elements:
        course = element.find_element(By.CLASS_NAME, 'ranepa-head-line').text
        if re.search(pattern, course):
            ranepa = element.find_element(By.CLASS_NAME, 'ranepa-hidden-content')
            link_elements = ranepa.find_elements(By.TAG_NAME, 'a')
            for link_element in link_elements:
                link = link_element.get_attribute('href')
                description = link_element.get_attribute('text')
                link_dict[description] = link
                # print(f'get_links() {link=}')
    return link_dict


def add_smiley_to_audience_and_teacher(text):
    text = re.sub(r'(\b[–û–ß–ü–ì]-\S+\b)', r'\nüè¢\1', text)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –ø–µ—Ä–µ–¥ –Ω–æ–º–µ—Ä–æ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    text = re.sub(r'([–ê-–Ø][–∞-—è]{1,20}\s[–ê-–Ø]\.[–ê-–Ø]\.)', r'üë®‚Äçüè´\1',
                  text)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –ø–µ—Ä–µ–¥ –∏–º–µ–Ω–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    return text


def get_timetable(link_dict):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
    driver = setup_driver()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    timetable_dict = {}
    subject_list = []
    first = True
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –≤—Ä–µ–º–µ–Ω–∞–º–∏ –¥–ª—è –ø–∞—Ä
    time_schedule = {
        1: "8.00 ‚Äì 9.30",
        2: "9.40 ‚Äì 11.10",
        3: "11.40 ‚Äì 13.10",
        4: "13.20 ‚Äì 14.50",
        5: "15.00 ‚Äì 16.30",
        6: "17.00 ‚Äì 18.30",
        7: "18.40 ‚Äì 20.10",
        8: "20.20 ‚Äì 21.50"
    }

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º
    for description, link in link_dict.items():
        driver.get(link)
        time.sleep(1)
        tables = driver.find_elements(By.TAG_NAME, 'table')
        for table in tables:
            for row in table.find_elements(By.TAG_NAME, 'tr')[1:]:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —è—á–µ–π–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                cells = row.find_elements(By.TAG_NAME, 'td')
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —è—á–µ–µ–∫
                day_of_week = cells[0].text
                if day_of_week != '–í—Ä–µ–º—è':
                    for num in range(1, len(cells)):
                        subject = cells[num].text
                        if subject != '' and subject != '_':
                            if first:
                                subject_list.append(
                                    f'üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_of_week}\n\nüï∞{time_schedule[num]}\nüìñ{subject}')
                                first = False
                            else:
                                subject_list.append(f'üï∞{time_schedule[num]}\nüìñ{subject}')
                                # print(f'get_timetable() {subject_list=}')
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–æ–≤
                    subject_list = [add_smiley_to_audience_and_teacher(event) for event in subject_list]
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞, –∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    timetable_dict[description + ' // ' + day_of_week] = subject_list
                    subject_list = []
                    first = True

    if len(timetable_dict) != 0:
        data = write_data()
        today = datetime.datetime.now()
        if '–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω' in data.keys():
            date = data['–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω']
            timetable_dict['–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω'] = f"{date}\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {today.strftime('%Y-%m-%d %H:%M')}"
        else:
            timetable_dict['–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω'] = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {today.strftime('%Y-%m-%d %H:%M')}"

    return timetable_dict


def start_pars():
    url = 'https://orel.ranepa.ru/studentam-i-slushatelyam/index.php'
    while True:
        links = get_links(url)
        print(f'start() {links=}')
        timetable = get_timetable(links)
        print(f'get_timetable() {timetable=}')
        if len(timetable) != 0:
            with open('timetable.json', 'w', encoding='utf-8') as json_file:
                json.dump(timetable, json_file, ensure_ascii=False, indent=4)
            time.sleep(120)
        else:
            time.sleep(5)


if __name__ == "__main__":
    start_pars()
