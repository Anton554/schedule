import json
import locale
import re
import datetime

user_groups = {}


def load_user_groups():
    try:
        with open('./user_groups.json', 'r', encoding='utf-8') as file:
            user_groups.update(json.load(file))
    except FileNotFoundError:
        pass


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –∏–∑ user_groups
def save_user_groups():
    with open('./user_groups.json', 'w', encoding='utf-8') as file:
        json.dump(user_groups, file, ensure_ascii=False, indent=4)


def save_messages(data_messages):
    with open('./messages.json', 'w', encoding='utf-8') as file:
        json.dump(data_messages, file, ensure_ascii=False, indent=4)


def write_messages():
    try:
        with open('./messages.json', 'r', encoding='utf-8') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        data = {}

    return data


def write_data():
    try:
        with open('./timetable.json', 'r', encoding='utf-8') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        data = {}

    return data


def write_users():
    try:
        with open('./user_groups.json', 'r', encoding='utf-8') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        data = {}

    return data


def get_grup():
    data = write_data()
    s = set()
    for el in data.keys():
        el = el.split(' // ')[0]
        if not el[0].isnumeric() and el != '–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω':
            s.add(el)
    return sorted(list(s))


def select_month(dict):
    month_mapping = {
        '—è–Ω–≤': '01', '—Ñ–µ–≤': '02', '–º–∞—Ä': '03', '–∞–ø—Ä': '04',
        '–º–∞–π': '05', '–∏—é–Ω': '06', '–∏—é–ª': '07', '–∞–≤–≥': '08',
        '—Å–µ–Ω': '09', '–æ–∫—Ç': '10', '–Ω–æ—è': '11', '–¥–µ–∫': '12'
    }

    for month, dates in dict.items():
        ls_new_date = []
        for date in dates:
            new_date = date.replace(date[3:6], month_mapping[date[3:6]])
            ls_new_date.append(new_date)
        dict[month] = ls_new_date
    return dict


def convert_date_format(input_string):
    date_match = re.match(r'^(.*?) // (\d{2})\.(\d{2}) (\w{2})$', input_string)
    if date_match:
        day = date_match.group(2)
        month = date_match.group(3)
        day_name = {
            '–ü–Ω': '–ü–Ω–¥',
            '–í—Ç': '–í—Ç—Ä',
            '–°—Ä': '–°—Ä–¥',
            '–ß—Ç': '–ß—Ç–≤',
            '–ü—Ç': '–ü—Ç–Ω',
            '–°–±': '–°–±—Ç',
            '–í—Å': '–í—Å–∫'
        }[date_match.group(4)]
        month_name = {
            '01': '—è–Ω–≤–∞—Ä—è',
            '02': '—Ñ–µ–≤—Ä–∞–ª—è',
            '03': '–º–∞—Ä—Ç–∞',
            '04': '–∞–ø—Ä–µ–ª—è',
            '05': '–º–∞—è',
            '06': '–∏—é–Ω—è',
            '07': '–∏—é–ª—è',
            '08': '–∞–≤–≥—É—Å—Ç–∞',
            '09': '—Å–µ–Ω—Ç—è–±—Ä—è',
            '10': '–æ–∫—Ç—è–±—Ä—è',
            '11': '–Ω–æ—è–±—Ä—è',
            '12': '–¥–µ–∫–∞–±—Ä—è'
        }[month]
        new_date = f"{day_name},{day} {month_name}"
        return f"{date_match.group(1)} // {new_date}"
    else:
        return input_string


def format_date_with_day(days_ago):
    day_name = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ü–Ω–¥',
        '–≤—Ç–æ—Ä–Ω–∏–∫': '–í—Ç—Ä',
        '—Å—Ä–µ–¥–∞': '–°—Ä–¥',
        '—á–µ—Ç–≤–µ—Ä–≥': '–ß—Ç–≤',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ü—Ç–Ω',
        '—Å—É–±–±–æ—Ç–∞': '–°–±—Ç',
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': '–í—Å–∫'
    }

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = datetime.datetime.now()

    # –í—ã—á–∏—Ç–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    seven_days_ago = today + datetime.timedelta(days=days_ago)

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    day_of_week = day_name[seven_days_ago.strftime('%A').lower()]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª—ë–º –¥–ª—è –¥–Ω—è –º–µ—Å—è—Ü–∞
    formatted_date = seven_days_ago.strftime('%d %B')

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
    formatted_date_with_day = f'{day_of_week},{formatted_date}'

    return formatted_date_with_day


def get_monthly_schedule(group_name):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º JSON-—Ñ–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    timetable_data = write_data()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    unique_dates = set(
        group.split(' // ')[1] for group in timetable_data.keys() if group.split(' // ')[0] == group_name)

    # –°–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Ö
    target_months = [
        '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å',
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å'
    ]

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ—Å—è—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç–∞—Ö
    months_with_schedule = [
        month for month in target_months
        if any(month[:3].upper() == date.split()[1][:3].upper() for date in unique_dates)
    ]

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_schedule = {month: [] for month in months_with_schedule}

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ—Å—è—Ü–∞–º
    for date in unique_dates:
        matching_month = next(
            month for month in months_with_schedule if month[:3].upper() == date.split()[1][:3].upper()
        )
        monthly_schedule[matching_month].append(date)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –∫–∞–∂–¥–æ–º –º–µ—Å—è—Ü–µ –∏ –∏–∑–º–µ–Ω—è–µ–º –∏—Ö —Ñ–æ—Ä–º–∞—Ç
    formatted_schedule = {}
    for month, dates in monthly_schedule.items():
        sorted_dates = sorted(dates, key=lambda x: int(x.split(',')[1].split()[0]))
        formatted_dates = [f"{date.split(',')[1].split()[0]}.{date.split()[1][:3]} {date.split(',')[0][:2]}" for date in
                           sorted_dates]
        formatted_schedule[month] = formatted_dates

    return months_with_schedule, select_month(formatted_schedule)


def show_rasp(date):
    data = write_data()
    try:
        msg = '\n\n'.join(data[date]) if len(data[date]) != 0 else '–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ—Ç –¥–µ–Ω—åü•≥'
    except:
        msg = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'
    return msg


def add_messages(messages_key, messages_val):
    today = datetime.datetime.now()
    ms_user = write_messages()
    if messages_key in ms_user.keys():
        ms = ms_user[messages_key]
        ms_user[messages_key] = f'{ms}\n{today.strftime("%Y-%m-%d %H:%M")} -- {messages_val}'
    else:
        ms_user[messages_key] = f'{today.strftime("%Y-%m-%d %H:%M")} -- {messages_val}'
    save_messages(ms_user)


def get_messages(messages_key):
    ms_user = write_messages()
    ls_ms_user = ms_user.get(messages_key, '').split('\n')[-30:]
    return '\n'.join(ls_ms_user)


if __name__ == '__main__':
    ls = get_monthly_schedule('–≠ 303')
    print(ls)
